generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                  @id @default(autoincrement())
  fullname               String
  username               String               @unique
  email                  String               @unique
  password               String
  profilePicture_url     String?              @db.Text
  profilePicture_assetId String?
  dateJoined             DateTime             @default(now())
  //realations
  UserSocialInfo         UserSocialInfo[]
  UserExpertise          UserExpertise[]
  UserProjects           UserProjects[]
  //
  userDetails            UserDetails?
  //
  UserExperience         UserExperience[]
  Feedback               Feedback[]
  UserSkills             UserSkills[]
  UserAnalytics          UserAnalytics[]
  UserEducation          UserEducation[]
  UserCertificate        UserCertificate[]
  UserLanguage           UserLanguage[]
  PasswordResetToken     PasswordResetToken[]
}

model UserDetails {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  user       User    @relation(fields: [userId], references: [id])
  //
  fullname   String?
  heroTitle  String?
  profession String?
  bio        String? @db.Text
  about      String? @db.LongText
}

model UserSocialInfo {
  id     Int    @id @default(autoincrement())
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  //
  name   String
  value  String
}

model UserExpertise {
  id          Int    @id @default(autoincrement())
  userId      Int
  user        User   @relation(fields: [userId], references: [id])
  //
  icon        String
  name        String
  description String
}

model UserProjects {
  id            Int     @id @default(autoincrement())
  userId        Int
  user          User    @relation(fields: [userId], references: [id])
  //
  imageUrl      String?
  imagePublicId String?
  title         String
  description   String?
  tags          String?
  url           String?
}

model Feedback {
  id      Int    @id @default(autoincrement())
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  //
  rating  Int    @default(0)
  message String @db.Text
}

model UserSkills {
  id         Int    @id @default(autoincrement())
  skill_name String
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
}

model UserAnalytics {
  id                  Int  @id @default(autoincrement())
  userId              Int  @unique
  user                User @relation(fields: [userId], references: [id])
  ///
  portfolioViewCount  Int? @default(0)
  portfolioClickCount Int? @default(0)
  resumeViewCount     Int? @default(0)
  resumeClickCount    Int? @default(0)
  resumeDownloadCount Int? @default(0)
}

model UserEducation {
  id           Int    @id @default(autoincrement())
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
  school       String
  degree       String
  fieldOfStudy String
  startYear    Int
  endYear      Int?
}

model UserExperience {
  id          Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  company     String
  position    String
  description String? @db.Text
  startMonth  String
  startYear   Int
  endMonth    String?
  endYear     Int?
}

model UserLanguage {
  id          Int    @id @default(autoincrement())
  userId      Int
  user        User   @relation(fields: [userId], references: [id])
  name        String
  proficiency String
}

model UserCertificate {
  id         Int    @id @default(autoincrement())
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
  name       String
  issuer     String
  issueMonth String
  issueYear  Int
}

model Refferals {
  id    Int    @id @default(autoincrement())
  ref   String @unique
  count Int    @default(0)
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
